pub_tags
research_tags
pub_tags[[1]]
pub_tags[[2]]
Publications %>% filter(`Document Type` == pub_types[1])
ds <- Publications %>% filter(`Document Type` == pub_types[1])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
research_tags
pub_tags[[1]] <- htmltools::tags$div(
list(
htmltools::tags$h4(paste0(pub_types[p],"s")),
htmltools::tags$ul(
research_tags
))
)
research_tags = htmltools::tagList()
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- htmltools::tags$div(
list(
htmltools::tags$h4(paste0(pub_types[p],"s")),
htmltools::tags$ul(
research_tags
))
)
htmltools::tags$div(pub_tags)
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
for (p in length(pub_types)) {
research_tags = rep(htmltools::tagList(),length(pub_types))
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[p][[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- htmltools::tags$div(
list(
htmltools::tags$h4(paste0(pub_types[p],"s")),
htmltools::tags$ul(
research_tags
))
)
}
htmltools::tags$div(pub_tags)
pub_tags[[2]]
Publications %>% filter(`Document Type` == pub_types[1])
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
research_tags = rep(htmltools::tagList(),length(pub_types))
for (p in length(pub_types)) {
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[p][[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- htmltools::tags$div(
list(
htmltools::tags$h4(paste0(pub_types[p],"s")),
htmltools::tags$ul(
research_tags[1],
research_tags[2]
))
)
}
htmltools::tags$div(pub_tags)
pub_tags[[2]]
Publications %>% filter(`Document Type` == pub_types[1])
research_tags
rep(htmltools::tagList(),length(pub_types))
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
for (p in length(pub_types)) {
research_tags = htmltools::tagList()
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- htmltools::tags$tagList(
htmltools::tags$h4(paste0(pub_types[p],"s")),
htmltools::tags$ul(
research_tags
))
)
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
for (p in length(pub_types)) {
research_tags = htmltools::tagList()
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- htmltools::tags$tagList(
htmltools::tags$h4(paste0(pub_types[p],"s")),
htmltools::tags$ul(
research_tags
)
)
}
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
for (p in length(pub_types)) {
research_tags = htmltools::tagList()
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- research_tags
}
(pub_tags)
pub_tags[[2]]
Publications %>% filter(`Document Type` == pub_types[1])
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
for (p in length(pub_types)) {
print(p)
research_tags = htmltools::tagList()
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- research_tags
}
pub_tags
pub_types = unique(Publications$`Document Type`)
library(dplyr)
Publications = rio::import("cv.xlsx", sheet = "Publications")
generateAPARef <- function(df) {
i=1
# loop through each row of the dataframe
# extract the bibliographic fields from the current row
author <- df$Authors[i]
year <- df$Year[i]
title <- df$Title[i]
journal <- df$Source[i]
volume <- df$Volume[i]
issue <- df$Issue[i]
page_start <- df$`Page start`[i]
page_end <- df$`Page end`[i]
pages <- ""
doi <- df$DOI[i]
url <- ""
# handle missing fields
if (is.na(author)) { author <- "" }
if (is.na(year)) { year <- "" }
if (is.na(title)) { title <- "" }
if (is.na(journal)) { journal <- "" }
if (is.na(volume)) { volume <- "" }
if (is.na(issue)) { issue <- "" }
if (!is.na(page_start)) {
if (!is.na(page_end)) {
pages <- paste0(page_start,"-",page_end)
} else {
pages <- page_start
}
}
if (!is.na(doi)) {
url <- doi
} else if (is.na(url)) {
url <- ""
}
# format the bibliographic entry in APA style
entry <- ""
if (author != "") {
entry <- paste(entry, author, " ", sep = "")
entry <- stringr::str_replace(entry,"López-Pernas S","<b>López-Pernas S</b>")
}
if (year != "") { entry <- paste(entry, "(" , year , ")", sep = "") }
if (title != "") { entry <- paste(entry, ". ", title, sep = "") }
if (journal != "") { entry <- paste(entry, ". <i>", journal,"</i>", sep = "") }
if (volume != "") { entry <- paste(entry, ", vol. ", volume, sep = "") }
if (issue != "") { entry <- paste(entry, "(", issue, ")", sep = "") }
if (pages != "") { entry <- paste(entry, ", pp. " , pages , sep = "") }
if (url != "") {
if (!is.na(doi)) {
entry <- paste(entry, ". <a target='_blank' href='https://doi.org/",url,"'>" , url , "</a>" ,sep = "")
} else {
entry <- paste(entry, ". <a target='_blank' href='",url,"'>" , url , "</a>" ,sep = "")
}
}
entry <- paste("<li>",entry, ".</li>", sep = "")
entry
}
(Publications) %>% ungroup %>% dplyr::mutate(seq = seq_along(Title)) -> Publications
Publications %>%  rowwise %>%
dplyr::mutate(Ref = generateAPARef(Publications[seq,])) -> Publications
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
for (p in length(pub_types)) {
print(p)
research_tags = htmltools::tagList()
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- research_tags
}
pub_tags
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
for (p in 1:length(pub_types)) {
print(p)
research_tags = htmltools::tagList()
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- research_tags
}
pub_tags
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
for (p in 1:length(pub_types)) {
research_tags = htmltools::tagList()
ds <- Publications %>% filter(`Document Type` == pub_types[p])
for (i in 1:nrow(ds)) {
if (!is.na(ds[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(ds[i,]$Ref)
}
}
pub_tags[[p]] <- htmltools::tagList(
htmltools::tags$h4(paste0(pub_types[p],"s")),
htmltools::tags$ul(
research_tags
)
)
}
(pub_tags)
keywords
library(dplyr)
Publications = rio::import("cv.xlsx", sheet = "Publications") %>% arrange(desc(Year))
generateAPARef <- function(df) {
i=1
# loop through each row of the dataframe
# extract the bibliographic fields from the current row
author <- df$Authors[i]
year <- df$Year[i]
title <- df$Title[i]
journal <- df$Source[i]
volume <- df$Volume[i]
issue <- df$Issue[i]
abstract <- df$Abstract[i]
page_start <- df$`Page start`[i]
page_end <- df$`Page end`[i]
pages <- ""
doi <- df$DOI[i]
url <- ""
number <- df$seq[i]
keywords <- df$Keywords[i]
# handle missing fields
if (is.na(author)) { author <- "" }
if (is.na(year)) { year <- "" }
if (is.na(title)) { title <- "" }
if (is.na(journal)) { journal <- "" }
if (is.na(volume)) { volume <- "" }
if (is.na(issue)) { issue <- "" }
if (is.na(abstract)) { abstract <- "" }
if (!is.na(page_start)) {
if (!is.na(page_end)) {
pages <- paste0(page_start,"-",page_end)
} else {
pages <- page_start
}
}
if (!is.na(doi)) {
url <- doi
} else if (is.na(url)) {
url <- ""
}
if (!is.na(keywords)) {
keywords <- stringr::str_split(keywords,"; ")
}
# format the bibliographic entry in APA style
entry <- ""
if (author != "") {
entry <- paste(entry, author, " ", sep = "")
entry <- stringr::str_replace(entry,"López-Pernas S","<b>López-Pernas S</b>")
}
if (year != "") { entry <- paste(entry, "(" , year , ")", sep = "") }
if (title != "") { entry <- paste(entry, ". ", title, sep = "") }
if (journal != "") { entry <- paste(entry, ". <i>", journal,"</i>", sep = "") }
if (volume != "") { entry <- paste(entry, ", vol. ", volume, sep = "") }
if (issue != "") { entry <- paste(entry, "(", issue, ")", sep = "") }
if (pages != "") { entry <- paste(entry, ", pp. " , pages , sep = "") }
if (url != "") {
if (!is.na(doi)) {
entry <- paste(entry, ". <a target='_blank' href='https://doi.org/",url,"'>" , url , "</a>" ,sep = "")
} else {
entry <- paste(entry, ". <a target='_blank' href='",url,"'>" , url , "</a>" ,sep = "")
}
}
entry <- paste0(entry,".")
if (abstract != "") {
entry <- paste(entry, " <button style='position: absolute;left: -36px; top: 0;' type='button' data-bs-toggle='collapse' data-bs-target='#ref-",number,"'   aria-expanded='false'  aria-controls='ref-",number,"' class='btn btn-sm btn-primary'>+</button>", sep = "")
if (!is.na(keywords)) {
kws <-""
for (kk in 1:length(keywords)) {
kws <- paste0(kws,"<button class='btn btn-sm btn-outline'>",keywords[kk],"</button>")
}
entry <- paste(entry,"<div>",kws,"</div>")
}
entry <- paste(entry,"<p id='ref-",number,"' class='collapse small'><br/>" , abstract , " </p>", sep = "")
}
entry <- paste("<li style='position:relative;'>",entry, "</li>", sep = "")
entry
}
(Publications) %>% ungroup %>% dplyr::mutate(seq = seq_along(Title)) -> Publications
Publications %>%  rowwise %>%
dplyr::mutate(Ref = generateAPARef(Publications[seq,])) -> Publications
pub_types = unique(Publications$`Document Type`)
pub_tags <- htmltools::tagList()
for (p in 1:length(pub_types)) {
year_tags = htmltools::tagList()
ds <- Publications %>% filter(`Document Type` == pub_types[p])
years <- unique(ds$Year)
for (y in 1:length(years)){
research_tags = htmltools::tagList()
dy <- ds %>% filter(Year == years[y])
for (i in 1:nrow(dy)) {
if (!is.na(dy[i,]$Ref)){
research_tags[[i]] <- htmltools::HTML(dy[i,]$Ref)
}
}
year_tags[[y]] <- htmltools::tagList(
htmltools::tags$h3(paste0(years[y])),
htmltools::tags$ul(
research_tags,
style="padding-left: 3rem"
)
)
}
pub_tags[[p]] <- htmltools::tagList(
htmltools::tags$h2(paste0(pub_types[p],"s")),
year_tags
)
}
(pub_tags)
Publications
keywords
library(dplyr)
Publications = rio::import("cv.xlsx", sheet = "Publications") %>% arrange(desc(Year))
generateAPARef <- function(df) {
i=1
# loop through each row of the dataframe
# extract the bibliographic fields from the current row
author <- df$Authors[i]
year <- df$Year[i]
title <- df$Title[i]
journal <- df$Source[i]
volume <- df$Volume[i]
issue <- df$Issue[i]
abstract <- df$Abstract[i]
page_start <- df$`Page start`[i]
page_end <- df$`Page end`[i]
pages <- ""
doi <- df$DOI[i]
url <- ""
number <- df$seq[i]
keywords <- df$Keywords[i]
# handle missing fields
if (is.na(author)) { author <- "" }
if (is.na(year)) { year <- "" }
if (is.na(title)) { title <- "" }
if (is.na(journal)) { journal <- "" }
if (is.na(volume)) { volume <- "" }
if (is.na(issue)) { issue <- "" }
if (is.na(abstract)) { abstract <- "" }
if (!is.na(page_start)) {
if (!is.na(page_end)) {
pages <- paste0(page_start,"-",page_end)
} else {
pages <- page_start
}
}
if (!is.na(doi)) {
url <- doi
} else if (is.na(url)) {
url <- ""
}
if (!is.na(keywords)) {
keywords <- stringr::str_split(keywords,"; ")
}
# format the bibliographic entry in APA style
entry <- ""
if (author != "") {
entry <- paste(entry, author, " ", sep = "")
entry <- stringr::str_replace(entry,"López-Pernas S","<b>López-Pernas S</b>")
}
if (year != "") { entry <- paste(entry, "(" , year , ")", sep = "") }
if (title != "") { entry <- paste(entry, ". ", title, sep = "") }
if (journal != "") { entry <- paste(entry, ". <i>", journal,"</i>", sep = "") }
if (volume != "") { entry <- paste(entry, ", vol. ", volume, sep = "") }
if (issue != "") { entry <- paste(entry, "(", issue, ")", sep = "") }
if (pages != "") { entry <- paste(entry, ", pp. " , pages , sep = "") }
if (url != "") {
if (!is.na(doi)) {
entry <- paste(entry, ". <a target='_blank' href='https://doi.org/",url,"'>" , url , "</a>" ,sep = "")
} else {
entry <- paste(entry, ". <a target='_blank' href='",url,"'>" , url , "</a>" ,sep = "")
}
}
entry <- paste0(entry,".")
if (abstract != "") {
entry <- paste(entry, " <button style='position: absolute;left: -36px; top: 0;' type='button' data-bs-toggle='collapse' data-bs-target='#ref-",number,"'   aria-expanded='false'  aria-controls='ref-",number,"' class='btn btn-sm btn-primary'>+</button>", sep = "")
if (!is.na(keywords)) {
kws <-""
for (kk in 1:length(keywords)) {
kws <- paste0(kws,"<button class='btn btn-sm btn-outline'>",keywords[kk],"</button>")
}
entry <- paste(entry,"<div>",kws,"</div>")
}
entry <- paste(entry,"<p id='ref-",number,"' class='collapse small'><br/>" , abstract , " </p>", sep = "")
}
entry <- paste("<li style='position:relative;'>",entry, "</li>", sep = "")
entry
}
(Publications) %>% ungroup %>% dplyr::mutate(seq = seq_along(Title)) -> Publications
Publications %>%  rowwise %>%
dplyr::mutate(Ref = generateAPARef(Publications[seq,])) -> Publications
Publications
stringr::str_split("sdfsdf; sdfdsf; sdfsdf")
stringr::str_split("sdfsdf; sdfdsf; sdfsdf")
stringr::str_split("sdfsdf; sdfdsf; sdfsdf","; ")
stringr::str_split("sdfsdf; sdfdsf; sdfsdf","; ")[[1]]
library(dplyr)
Software = rio::import("cv.xlsx", sheet = "Software")
library(dplyr)
Software = rio::import("cv.xlsx", sheet = "Software")
generateSW <- function(Title,	Description,	Repo,	Demo,	Web) {
return ("ddd")
}
Software %>% rowwise %>% dplyr::mutate(Text = generateSW(Title,	Description,	Repo,	Demo,	Web))
library(dplyr)
Software = rio::import("cv.xlsx", sheet = "Software")
generateSW <- function(Title,	Description,	Repo,	Demo,	Web) {
result <- paste0(
'<h2 id="tidyhte" class="ancfhored">tidyhte',
'<a class="anchorjs-link " aria-label="Anchor" data-anchorjs-icon="" href="#tidyhte" style="font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h2>
<p>Description</p>
<a class="btn btn-outline-dark btn-sm" ,="" href="https://ddimmery.github.io/tidyhte/" target="_blank" rel="noopener noreferrer">
<i class="bi bi-info" role="img" aria-label="Website"></i>
Website
</a>
<a class="btn btn-outline-dark btn-sm" ,="" href="https://github.com/ddimmery/tidyhte" target="_blank" rel="noopener noreferrer">
<i class="bi bi-github" role="img" aria-label="Github"></i>
Github
</a>
<a class="btn btn-outline-dark btn-sm" ,="" href="https://ddimmery.github.io/tidyhte/" target="_blank" rel="noopener noreferrer">
<i class="bi bi-info" role="img" aria-label="Website"></i>
Demo
</a>')
htmltools::HTML(result)
}
Software %>% rowwise %>% dplyr::mutate(Text = generateSW(Title,	Description,	Repo,	Demo,	Web))
htmltools::tagList(list((Software %>% rowwise %>% dplyr::mutate(Text = generateSW(Title,	Description,	Repo,	Demo,	Web))$Text)))
library(dplyr)
Software = rio::import("cv.xlsx", sheet = "Software")
generateSW <- function(Title,	Description,	Repo,	Demo,	Web) {
result <- paste0(
'<h2 id="tidyhte" class="ancfhored">tidyhte',
'<a class="anchorjs-link " aria-label="Anchor" data-anchorjs-icon="" href="#tidyhte" style="font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h2>
<p>Description</p>
<a class="btn btn-outline-dark btn-sm" ,="" href="https://ddimmery.github.io/tidyhte/" target="_blank" rel="noopener noreferrer">
<i class="bi bi-info" role="img" aria-label="Website"></i>
Website
</a>
<a class="btn btn-outline-dark btn-sm" ,="" href="https://github.com/ddimmery/tidyhte" target="_blank" rel="noopener noreferrer">
<i class="bi bi-github" role="img" aria-label="Github"></i>
Github
</a>
<a class="btn btn-outline-dark btn-sm" ,="" href="https://ddimmery.github.io/tidyhte/" target="_blank" rel="noopener noreferrer">
<i class="bi bi-info" role="img" aria-label="Website"></i>
Demo
</a>')
htmltools::HTML(result)
}
htmltools::tagList(list((Software %>% rowwise %>% dplyr::mutate(Text = generateSW(Title,	Description,	Repo,	Demo,	Web)))$Text))
htmltools::tagList(list(sww$Text))
sww<-Software %>% rowwise %>% dplyr::mutate(Text = generateSW(Title,	Description,	Repo,	Demo,	Web) )
htmltools::tagList(list(sww$Text))
sww
sww$Text
sww$Text
sww<-Software %>% rowwise %>% dplyr::mutate(Text = generateSW(Title,	Description,	Repo,	Demo,	Web) )
sww
sww$Text
sww$Text
print(sww$Text)
paste(sww$Text,collapse="")
htmltools::HTML(paste(sww$Text,collapse=""))
::
