{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","left","right","from","to","_this2","react_default","a","createElement","className","onChange","e","setState","target","value","disabled","onWrite","onClick","convert","bind","reset","ref","refs","select","document","execCommand","download","_this3","_this$state","moodleXMLtoJson","res","err","JSON","stringify","console","error","alert","aikenToMoodleXML","result","replace","side","defineProperty","filename","text","element","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","_this4","window","onbeforeunload","_this4$state","localStorage","_JSON$parse","parse","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b90ecc8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport moodleXMLtoJson from 'moodlexml-to-json';\nimport aikenToMoodleXML from 'aiken-to-moodlexml';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      left: \"\",\n      right :\"\",\n      from: 'xml',\n      to: 'json'\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n       <header><h1> <i className=\"material-icons\">school</i> QUIZ converter</h1></header>\n       <div className=\"content\"> \n          <div className=\"content-col left\">\n            <div><h2>From</h2>\n            <select onChange={(e)=>{this.setState({from: e.target.value})}} value={this.state.from}>\n              <option value=\"xml\" >MoodleXML</option>\n              <option value=\"txt\" >Aiken</option>\n              <option disabled value=\"json\" >JSON</option>\n            </select>\n            </div>\n            <textarea onChange={(e)=>{this.onWrite(e,'left')}} value={this.state.left}></textarea>\n            <div className=\"buttons\">\n              <button onClick={this.convert.bind(this)}>\n                <i className=\"material-icons\">play_arrow</i>Convert\n              </button>\n              <button onClick={this.reset.bind(this)}>\n                <i className=\"material-icons\">replay</i>Reset\n              </button>\n            </div>\n          </div>\n          <div className=\"content-col right\">\n            <div><h2>To</h2>\n            <select onChange={(e)=>{this.setState({to: e.target.value})}} value={this.state.to}>\n              <option value=\"xml\" >MoodleXML</option>\n              <option disabled value=\"txt\" >Aiken</option>\n              <option value=\"json\" >JSON</option>\n            </select>\n            </div>\n            <textarea ref=\"right\" onChange={(e)=>{this.onWrite(e,'right')}} value={this.state.right}></textarea>\n            <div className=\"buttons\">\n              <button onClick={()=>{\n                this.refs.right.select();\n                document.execCommand('copy');\n              }}>\n                <i className=\"material-icons\">file_copy</i>Copy\n              </button>\n              <button onClick={()=>{this.download(\"quiz.\"+this.state.to, this.state.right)}}>\n                <i className=\"material-icons\">cloud_download</i>Download\n              </button>\n            </div>\n          </div>\n       </div>\n      </div>\n    );\n  }\n  convert() {\n    const {from, to, left} = this.state;\n    if (from === \"xml\" && to === \"json\") {\n      moodleXMLtoJson(left, (res,err)=>{\n        let right = JSON.stringify(res, null, 2)\n        if (err) {\n          console.error(err);\n          alert(\"Not a valid MoodleXML file\");\n          this.setState({right: ''});\n          return;\n        }\n        this.setState({right});\n      })\n    } else if (from === \"txt\" && to === \"json\") {\n      aikenToMoodleXML(left, (result,error)=>{\n        moodleXMLtoJson(result.replace(/\\t/g, \"  \"), (res,err)=>{\n          let right = JSON.stringify(res, null, 2)\n          if (err) {\n            console.error(err);\n            alert(\"Not a valid Aiken file\");\n            this.setState({right: ''});\n            return;\n          }\n          this.setState({right});\n        })\n      })\n    } else if (from === \"txt\" && to === \"xml\") {\n      aikenToMoodleXML(left, (res, err) => {\n          let right = (res)\n          .replace(/\\t/g, \"  \");\n          if (err) {\n            console.error(err);\n            alert(\"Not a valid Aiken file\");\n            this.setState({right: ''});\n            return;\n          }\n          this.setState({right});\n      })\n    } else if (from === \"xml\" && to === \"xml\") {\n      this.setState({right: left});\n    }\n  }\n\n  reset() {\n    this.setState({left:\"\", right: \"\"});\n  }\n\n  onWrite(e,side){\n    this.setState({ [side]: e.target.value});\n  }\n\n  download(filename, text) {\n    let element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  componentDidMount(){\n    window.onbeforeunload = (e) => {\n      const {left, right, from, to} = this.state;\n      localStorage.moodleXMLtoJson = JSON.stringify({left, right, from, to});\n    };\n    if (localStorage.moodleXMLtoJson) {\n      const {left, from, to} = JSON.parse(localStorage.moodleXMLtoJson);\n      this.setState({left, from, to});\n    }\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}