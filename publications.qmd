---
title: "Publications"
toc: true
include-before-body:
  text: |
    <script>
    var filterCat = function(name) {
            var x = document.getElementById("badge-"+name);
            x.classList.toggle("active");
          
            document.querySelectorAll(".cat-badge:not(#badge-"+ name + ")").forEach(e=>(e.classList.remove("active")))

            var all_articles = document.getElementsByClassName("ref-entry");
          
            if (x.classList.contains("active")) {
                for(var i = 0; i< all_articles.length;i++) {
                  all_articles[i].style.display = all_articles[i].classList.contains("is-"+name) ? "block":"none";
                }
            } else {
               for(var i = 0; i< all_articles.length;i++) {
                  all_articles[i].style.display = "block";
                } 
            }
      }
      window.onload = function(){
        const searchParams = new URLSearchParams(window.location.search);
        if (searchParams.has("filter")) {
          if (searchParams.get('filter')=="la"){filterCat("la")}
          if (searchParams.get('filter')=="biblio"){filterCat("biblio")}
          if (searchParams.get('filter')=="gbl"){filterCat("gbl")}
          if (searchParams.get('filter')=="eng"){filterCat("eng")}
          if (searchParams.get('filter')=="ai"){filterCat("ai")}
  
        }
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
           return new bootstrap.Tooltip(tooltipTriggerEl)
        })
      }

    </script>
    
---


```{r, include=F}

library(dplyr, warn.conflicts = FALSE)
Publications = rio::import("cv.xlsx", sheet = "Publications") %>% arrange(JCR,desc(`Document Type`),desc(Year))

generateAPARef <- function(df) {
    i=1
  # loop through each row of the dataframe
    # extract the bibliographic fields from the current row
    author <- df$Authors[i]
    year <- df$Year[i]
    title <- df$Title[i]
    journal <- df$Source[i]
    volume <- df$Volume[i]
    issue <- df$Issue[i]
    num <- df$ArtNo[i]
    abstract <- df$Abstract[i]
    page_start <- df$`Page start`[i]
    page_end <- df$`Page end`[i]
    pages <- ""
    doi <- df$DOI[i]
    url <- df$URL[i]
    note <- df$Note[i]
    number <- df$seq[i]
    keywords <- df$Keywords[i]
    jcr <- df$JCR[i]  
    latag<- df$LA[i] == "X"
    bibtag<- df$BIBLIOMETRICS[i] == "X"
    aitag<- df$AI[i] == "X"
    gbltag<- df$GBL[i] == "X"
    # handle missing fields
    if (is.na(author)) { author <- "" }
    if (is.na(year)) { year <- "" }
    if (is.na(title)) { title <- "" }
    if (is.na(journal)) { journal <- "" }
    if (is.na(volume)) { volume <- "" }
    if (is.na(issue)) { issue <- "" }
    if (is.na(abstract)) { abstract <- "" }
    if (is.na(jcr)) { jcr <- "" }
    if (is.na(num)) { num <- "" }
    if (is.na(note)) { note <- "" }
    if (!is.na(page_start)) {
      if (!is.na(page_end)) {
        pages <- paste0(page_start,"-",page_end) 
      } else {
        pages <- page_start
      }
    }
    if (!is.na(doi)) {
      url <- doi 
    } else if (is.na(url)) {
      url <- ""
    }
    if (!is.na(keywords)) {
      keywords <- stringr::str_to_lower(stringr::str_split(keywords,"; ")[[1]])
    } else {
      keywords <-c()
    }
    
    # format the bibliographic entry in APA style
    entry <- ""
    if (author != "") { 
      entry <- paste(entry, author, " ", sep = "")
      entry <- stringr::str_replace(entry,"López-Pernas S","<b>López-Pernas S</b>")
    
    }
    if (year != "") { entry <- paste(entry, "(" , year , ")", sep = "") }
    if (title != "") { entry <- paste(entry, ". ", title, sep = "") }
    if (journal != "") { entry <- paste(entry, ". <i>", journal,"</i>", sep = "") }
    if (volume != "") { entry <- paste(entry, ", vol. ", volume, sep = "") }
    if (issue != "") { entry <- paste(entry,ifelse(volume != "",""," "), "(", issue, ")", sep = "") }
    if (num != "") { entry <- paste(entry, ", art. no. " , num, sep = "") }
    if (pages != "") { entry <- paste(entry, ", pp. " , pages , sep = "") }
    if (url != "") { 
      if (!is.na(doi)) {
        entry <- paste(entry, ". doi: <a target='_blank' href='https://doi.org/",url,"'>" , url , "</a>" ,sep = "") 
      } else {
          entry <- paste(entry, ". <a target='_blank' href='",url,"'>" , url , "</a>" ,sep = "") 

      }
    } 
    if (jcr != "") {
      entry <- paste(entry, ". ", "(JCR ",jcr, ")", sep="")
    }  
    entry <- paste0(entry,".")
    if (note != "") {
      entry <- paste(entry,"<button class='btn btn-sm btn-blank btn-note'  data-bs-toggle='tooltip' data-bs-placement='bottom' title='", note, "'><i class='bi bi-star-fill'></i></button>", sep = "")
    }
    if (abstract != "") { 
      entry <- paste(entry, " <button type='button' data-bs-toggle='collapse' data-bs-target='#ref-",number,"'   aria-expanded='false'  aria-controls='ref-",number,"' class='btn btn-sm btn-danger btn-pub'><i class='bi bi-plus-lg'></i></button>", sep = "")
      kws <-""
      for (kk in 1:length(keywords)) {
        kws <- paste0(kws,"<span style='margin-right: 2px;margin-bottom: 5px;' class='badge rounded-pill bg-warning'>",keywords[kk],"</span>")
      }
      entry <- paste(entry,"<div class='collapse' id='ref-",number,"'>",
                     "<p class='small'><br/>" , 
                     abstract , 
                     "</p><p>",kws,"</p><br/>"," </div>", sep = "") 
    }
    
    entry <- paste("<li style='position:relative;margin-bottom:0.8rem;list-style:none;' class='ref-entry ",
                   ifelse(!is.na(latag) , "is-la", " "), 
                   ifelse(!is.na(bibtag), "is-biblio", " "), 
                   ifelse(!is.na(aitag), "is-ai", " "), 
                   ifelse(!is.na(gbltag), "is-gbl", " "),
                   "'>", entry, "</li>", sep = "")
    
    entry
}
(Publications) %>% ungroup %>% dplyr::mutate(seq = seq_along(Title)) -> Publications
Publications %>%  rowwise %>% 
  dplyr::mutate(Ref = generateAPARef(Publications[seq,])) -> Publications
```

```{r, echo=F, warning = F}
outcomes <- Publications %>%  janitor::tabyl(`Document Type`) %>% data.frame %>% pull(n,`Document.Type`) 
outcomes_with_types <- Publications %>% dplyr::mutate(field = ifelse(is.na(JCR),`Document Type`,JCR)) %>% janitor::tabyl(field) %>% data.frame %>% pull(n,field) 
only_types <- Publications %>% janitor::tabyl(JCR) %>% data.frame %>% filter(!is.na(JCR)) %>% arrange(JCR) %>% pull(n,JCR) 
output = paste0("My ", nrow(Publications), " research publications include ")
types_pub = rev(names(outcomes))
for (i in 1:length(types_pub)) {
  pubb <- types_pub[i]
  numberr <- outcomes[[pubb]]
  lastt <- i==length(types_pub)
  jcrs <- ""
  if (pubb == "Journal Article") {
    if (outcomes_with_types[["Journal Article"]] != outcomes[["Journal Article"]] ){
      jcrs <- paste0(jcrs," (")
      for (j in 1:length(names(only_types))){
        qq <- names(only_types)[j]
        jcrs <- paste0(jcrs, only_types[[qq]], " JCR ",qq, ifelse(only_types[[qq]]>1,"s",""),ifelse( length(names(only_types)) == j,"",", "))
      }
      jcrs <- paste0(jcrs,")")
    } 
  }
  
  output = paste0( output, ifelse(lastt, "and ",""), 
                   numberr, " ",  stringr::str_to_lower(pubb), 
                   ifelse(numberr > 1,"s",""),
                   jcrs,
                   ifelse( lastt,".",", "))
}
htmltools::tags$p(output)
la <- Publications |> filter(LA=="X") |> nrow()
bibliometrics <- Publications |> filter(BIBLIOMETRICS=="X") |> nrow()
gbl <- Publications |> filter(GBL=="X") |> nrow()
ai <- Publications |> filter(AI=="X") |> nrow()
```


<span><b style="vertical-align:'middle;'">Filter by topic: </b><br/>
<button style='margin-right: 2px; margin-bottom: 2px;' class='btn badge rounded-pill bg-danger cat-badge ' id='badge-la' onclick="filterCat('la')">learning analytics (`r la`)</button>
<button style='margin-right: 2px; margin-bottom: 2px;' class='btn badge rounded-pill bg-danger cat-badge ' id='badge-gbl' onclick="filterCat('gbl')">game-based learning (`r gbl`)</button>
<button style='margin-right: 2px; margin-bottom: 2px;' class='btn badge rounded-pill bg-danger cat-badge ' id='badge-ai' onclick="filterCat('ai')">artificial intelligence (`r ai`)</button>
<button style='margin-right: 2px; margin-bottom: 2px;' class='btn badge rounded-pill bg-danger cat-badge ' id='badge-biblio' onclick="filterCat('biblio')">bibliometrics (`r bibliometrics`)</button>
</span>
<style>
.cat-badge:not(.active) {
  opacity:0.5;
}
</style>
<br/>
```{r, echo= F, include=F, warning = F}
pub_types = unique(c("Journal Article", "Conference Paper", "Book Chapter", Publications$`Document Type`))
pub_tags <- htmltools::tagList()
for (p in 1:length(pub_types)) {
  year_tags = htmltools::tagList()
  ds <- Publications %>% filter(`Document Type` == pub_types[p])
  years <- unique(ds$Year)
  for (y in 1:length(years)){
    research_tags = htmltools::tagList()

    dy <- ds %>% filter(Year == years[y])
    for (i in 1:nrow(dy)) {
      if (!is.na(dy[i,]$Ref)){
        research_tags[[i]] <- htmltools::HTML(dy[i,]$Ref)
      }
    }
    
    year_tags[[y]] <- htmltools::tagList(
      htmltools::tags$h3(paste0(years[y])),
      htmltools::tags$ul(
        research_tags,
        style="padding-left: 3rem"
      )
    )
  }
  
  pub_tags[[p]] <- htmltools::tagList(
      htmltools::tags$h2(paste0(pub_types[p],"s")),
        year_tags
    )
}
(pub_tags)
```
 
```{r, echo= F, results='asis', warning = F}
pub_types = (unique(Publications$`Document Type`))
pub_tags <- htmltools::tagList()
for (p in 1:length(pub_types)) {
  year_tags = htmltools::tagList()
  ds <- Publications %>% filter(`Document Type` == pub_types[p])  %>% mutate(pos = which(strsplit(Authors,", ")[[1]] == "López-Pernas S.")) %>% arrange(desc(Year),pos)
  years <- unique(ds$Year)
  for (y in 1:length(years)){
    research_tags = htmltools::tagList()
    dy <- ds %>% filter(Year == years[y])
    for (i in 1:nrow(dy)) {
      if (!is.na(dy[i,]$Ref)){
        research_tags[[i]] <- htmltools::HTML(dy[i,]$Ref)
      }
    }
    year_tags[[y]] <- htmltools::tagList(
      htmltools::tags$h3(paste0(years[y])),
      htmltools::tags$ul(research_tags, style="padding-left: 3rem")
    )
  }
  cat(paste0("\n## ", pub_types[p],"s\n"))
  print(year_tags)
}

```



